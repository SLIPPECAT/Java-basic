<h1>클래스, 객체, 참조변수</h1>
<h3>클래스, 객체, 참조변수</h3>

    package Section1;

    public class Code01 {
        public static void main(String[] args) {
            Person1 first;  // 하나의 Person1 타입
            first = new Person1();  // 객체(object)를 생성하고 얘를 first라고 한다.

            first.name = "john";  // .연산자를 이용해서 저장
            first.number = "0101234568";

            System.out.println("Name: " + first.name+", "+"Number: "+first.number);  // 출력

            Person1[] members = new Person1 [100];  // Person1 타입의 배열도 만들 수 있다.
            members[0] = first;
            members[1] = new Person1();
            members[1].name = "David";  //
            members[1].number = "232321233";

            System.out.println("Name: " + members[1].name+", "+"Number: "+members[1].number);
        }
    }


<h3>클래스, 객체, 참조변수</h3>

        package Section1;

        import java.io.File;
        import java.io.FileNotFoundException;
        import java.util.Scanner;
        public class Code02 {
            static Person1[] members = new Person1[100];
            static int n = 0;
            public static void main(String[] args) {
                try {
                    Scanner in = new Scanner(new File("input.txt"));
                    while( in.hasNext()) {
                        String nm = in.next();
                        String nb = in.next();
                        members[n] = new Person1();
                        members[n].name = nm;
                        members[n].number = nb;
                        n++;
                    }
                    in.close();
                } catch (FileNotFoundException e){
                    System.out.println("No data file");
                }
                for (int i=0; i<n; i++){
                    System.out.println(members[i].name+" "+members[i].number);
                }
            }

        }



<h3>클래스, 객체, 참조변수</h3>
이름과 번호를 입력받고 번호순으로 정렬한다.

        private static void bubbleSort() {
            for(int i=n-1; i>0; i--){
                for(int j=0; j<i; j++){
                    if( members[j].name.compareTo(members[j+1].name) > 0){  // compare names of j-th and (j+1)-th person
                        // swap two person
                        Person1 tmp = members[j];  // Person1 tmp의 객체를 만들지 않아도 될까?
                        members[j] = members[j+1];  // 지금 주소끼리 복사하고 있다는 걸 알아두자.
                        members[j+1] = tmp;
                    }
                }
            }
        }

<h3>클래스, 객체, 참조변수</h3>
인덱스 메이커 프로그램의 수정<br>
방향: 외부 클래스인 Item이란 클래스에서 String word, int count를 이용해서 조금 더 간단히 표현해보자

        // 
        package Section1;

        public class Item {
            public String word;
            public int count;
        }
        
        // 
        package Section1;

        import java.io.*;
        import java.util.Scanner;

        public class IndexMaker {
        //    static String[] words = new String[100000];
        //    static int[] count = new int[100000];
            static Item[] items = new Item[100000];
            static int n = 0;

            public static void main(String[] args) {
                Scanner kb = new Scanner(System.in);
                while (true) {
                    System.out.println("$ ");
                    String command = kb.next();
                    if (command.equals("read")) {
                        String fileName = kb.next();  // sample.txt
                        makeIndex(fileName);
                    } else if (command.equals("find")) {
                        String str = kb.next();
                        int index = findWord(str);
                        if (index > -1) {
                            System.out.println("The word "+items[index].word+" appears"+items[index].count+" times.");
                        }
                        else {
                            System.out.println("The word "+str+" does not appear.");
                        }

                    } else if (command.equals("saveas")) {
                        String fileName = kb.next();  // sample.txt
                        saveAs(fileName);
                    } else if (command.equals("exit"))
                        break;
                }
                kb.close();
            }
            static void saveAs(String fileName){
                PrintWriter outFile;
                try{
                    outFile = new PrintWriter(new FileWriter(fileName));
                    for (int i=0; i<n; i++){
                        outFile.println(items[i].word + " " + items[i].count);
                    }
                    outFile.close();
                } catch (IOException e){
                    System.out.println("Save failed");
                    return;
                }
            }
            static void makeIndex(String fileName) {
                try {
                    Scanner inFile = new Scanner(new File(fileName));
                    while (inFile.hasNext()) {
                        String str = inFile.next();  // 하나를 읽는다.

                        String trimmed = trimming(str);
                        if (trimmed != null){
                            String t = trimmed.toLowerCase();
                            addWord( t );
                        }
                    }
                    inFile.close();
                } catch (FileNotFoundException e) {
                    System.out.println("No file");
                    return;
                }
            }

            static String trimming(String str) {

                int i = 0, j = str.length()-1;
                while ( i < str.length() && !Character.isLetter( str.charAt(i) ) )  //  while i-th character is not letter i++
                    i++;  // 범위를 벗어나지 않게 i로 범위를 설정해준다.
                while ( j >=0  && !Character.isLetter( str.charAt(j) ) )  //  while i-th character is not letter i++
                    j--;  // 범위를 벗어나지 않게 i로 범위를 설정해준다.
        //        System.out.println(str + ";"+i+":"+j);  // 알파벳이 없는 경우가 있다. i가 j보다 커져버림
                if (i > j)
                    return null;
                return str.substring(i, j+1);
            }

            // 문자열에 목록이 있는지 확인하는 함수
            static void addWord(String str) {

                int index = findWord(str);   // returns -1 if not found
                if (index != -1) {  // found  words[index] == str  // exist
                    items[index].count++;
                }
                else {  //not found
                    int i =n-1;
        //            while(;i>= && words[i].compareTo(str)>0){}

                    while (i >= 0 && items[i].word.compareToIgnoreCase(str) > 0){
                        items[i+1] = items[i]; // 이제 items를 통째로 바꿀 것!
                        i--;
                    }
                    // 여기서 처리를 해줘야 하는 부분이 있다..아래꺼
                    // 이 라인이 중요한 이유는 지금 새로 추가된 단어가 들어갈 공간을 마련하지 않은 꼴이 된다.
                    items[i+1] = new Item();
                    // 이렇게 해야 새로 만들어진 객체의 참조변수의 안에 값을 넣어줄 수 있다.
                    items[i+1].word = str;
                    items[i+1].count = 1;
                    n++;
                }
            }
            static int findWord(String str) {
                for (int i = 0; i < n; i++) {
                    if (items[i].word.equalsIgnoreCase(str)) {
                        return i;
                    }
                }
                return -1;
            }
        }

<h3>사각형의 면적</h3>
평면상에 좌표측에 평행한 n개의 직사각형에 관한 데이터를 입력 받은 후 면적이 작은 것부터 큰 것 순으로<br>
정렬하여 출력하는 프로그램을 작성하라.<br>

입력 파일의 형식<br>
0 1 2 4  // 왼쪽-위쪽 꼭지점의 좌표가 (0,1)이고, 너비가 2, 높이가 4<br>
1 4 7 8<br>
4 3 12 9<br>
8 18 11 30<br>
5 10 6 11<br>

        
        
        
        
